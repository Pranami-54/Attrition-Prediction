# -*- coding: utf-8 -*-
"""Employee_Attrition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CTUwsQWG1NluJ1urU_IDvI6aW33jsSSp

**Predict Employee Attrition**
"""

import pandas as pd

"""Get the data"""

data = pd.read_csv('/content/Attrition_data.csv')

#Display the first few rows to understand the data
data.head(15)

pd.set_option('display.max_columns', None)

data.shape

data.info()

#Descriptive Statistics
data.describe()

"""**Check Duplicates**"""

data.duplicated().value_counts()

data.drop_duplicates(inplace = True)
data.shape

"""**Checking missing value**"""

data.isnull().sum()

data.dropna(inplace = True)

data.shape

data.isnull().sum()

"""**Target Variable**"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

plt.figure(figsize = (18,6))
sns.countplot(y='Attrition', data=data)
plt.show()

#here we can see that it is imbalanced dataset

"""**EDA**"""

#Department with Attrition
plt.figure(figsize = (18,6))
sns.countplot(x='Department', hue='Attrition', data=data)
plt.title("Attrition with Department")
plt.show()

#EducationField with Attrition
plt.figure(figsize = (18,6))
sns.countplot(x='EducationField', hue='Attrition', data=data)
plt.title("Attrition with EducationField")
plt.show()

#JobRole with Attrition
plt.figure(figsize = (18,6))
sns.countplot(x='JobRole', hue='Attrition', data=data)
plt.title("Attrition with JobRole")
plt.show()

#Gender with Attrition
plt.figure(figsize = (18,6))
sns.countplot(x='Gender', hue='Attrition', data=data)
plt.title("Attrition with Gender")
plt.show()

#distribution of age
plt.figure(figsize = (18,6))
sns.distplot(data['Age'], hist=False)
plt.show()

ordinal_features = ['Education','EnvironmentSatisfaction','JobInvolvement','JobSatisfaction',
                   'PerformanceRating']
data[ordinal_features].head()

edu_map = {1:'Belo College', 2:'College', 3:'Bachlor', 4:'Master', 5:'Doctor'}
plt.figure(figsize = (18,6))
sns.countplot(x=data['Education'].map(edu_map), hue='Attrition', data=data)
plt.title("Education with Attrition")
plt.show()

"""**Label Encoding**"""

#Target Variable(Attrition)
data['Attrition'] = data['Attrition'].replace({'No': 0, 'Yes': 1})

#Apply label encoder to categorical variable
from sklearn.preprocessing import LabelEncoder

encoding_cols = ['Gender','BusinessTravel','Department','EducationField','JobRole','MaritalStatus']
label_encoder = {}
for column in encoding_cols:
    label_encoder[column] = LabelEncoder()
    data[column] = label_encoder[column].fit_transform(data[column])

import pickle

# Save the label encoders to a file
with open('label_encoders.pkl', 'wb') as file:
    pickle.dump(label_encoder, file)

data.head()

X = data.drop(['Attrition','Over18','EmployeeID','EmployeeCount','StandardHours'], axis=1)
y = data['Attrition'].values

"""**Split the data into training and testing**"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=200)

"""Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, roc_curve, roc_auc_score

model = RandomForestClassifier()
model.fit(X_train, y_train)

prediction = model.predict(X_test)
cm = confusion_matrix(y_test, prediction)
print(cm)

print("Accuracy score:",accuracy_score(y_test, prediction))

plt.figure(figsize = (18,6))
sns.heatmap(pd.DataFrame(cm), annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Expected')

y_pred_proba = model.predict_proba(X_test)[::,1]
fpr, tpr, _ = roc_curve(y_test, prediction)
auc = roc_auc_score(y_test, prediction)
ax2 = plt.plot(fpr, tpr, label='data 1, auc='+str(auc))
plt.show()

import numpy as np

input_data = (37, 2, 1, 29, 4, 5, 0, 1, 2, 1, 78800, 3.0, 12, 1, 9.0, 2, 4, 0, 2, 3.0, 3.0, 2.0, 4, 3)

#Changing the input_data to numpy_array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are prediction for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshape)

if (prediction[0] == 0):
    print("No")
else:
    print("Yes")

filename = 'trained_model.sav'
pickle.dump(model, open(filename, 'wb'))

#Loading the saved model
loaded_model = pickle.load(open('trained_model.sav', 'rb'))

input_data = (37, 2, 1, 29, 4, 5, 0, 1, 2, 1, 78800, 3.0, 12, 1, 9.0, 2, 4, 0, 2, 3.0, 3.0, 2.0, 4, 3)


# Prepare the input data
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshape = input_data_as_numpy_array.reshape(1, -1)

# Make prediction
prediction = loaded_model.predict(input_data_reshape)

# Output the prediction
if prediction[0] == 0:
    print("The employee will not attrite.")
else:
    print("The employee will attrite.")

